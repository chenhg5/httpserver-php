<?php

namespace HttpServer\Module\Server;


class SelectPollModel extends BaseModel
{
    public function run()
    {
        parent::run(); // TODO: Change the autogenerated stub

        // select/poll 模型 同步非阻塞 IO
//        if ($mode == SELECT_POLL_MODE) {
//
//
//            function close($i, &$connections)
//            {
//                stream_socket_shutdown($connections[ $i ], STREAM_SHUT_RD);
//                socket_close($connections[ $i ]);
//                unset($connections[ $i ]);
//            }

//            while (true)
//            {
//                $readfds = array_merge($connections, array($socket));
//                $writefds = array();
//
//                // 选择一个连接，获取读、写连接通道
//                if (stream_select($readfds, $writefds, $e = null, $t = 60))
//                {
//                    // 如果是当前服务端的监听连接
//                    if (in_array($socket, $readfds)) {
//                        // 接受客户端连接
//                        $newconn = stream_socket_accept($socket);
//                        $i = (int) $newconn;
//                        $reject = '';
//                        if (count($connections) >= 1024) {
//                            $reject = "Server full, Try again later./n";
//                        }
//                        // 将当前客户端连接放入 socket_select 选择
//                        $connections[$i] = $newconn;
//                        // 输入的连接资源缓存容器
//                        $writefds[$i] = $newconn;
//
//                        // 连接不正常
//                        if ($reject) {
//                            @fwrite($writefds[$i], $reject);
//                            unset($writefds[$i]);
//                            close($i, $connections);
//                        } else {
//                            echo "Client $i come./n";
//                        }
//                        // remove the listening socket from the clients-with-data array
//                        $key = array_search($socket, $readfds);
//                        unset($readfds[$key]);
//                    }
//
//                    // 轮循读通道
//                    foreach ($readfds as $rfd) {
//                        // 客户端连接
//                        $i = (int) $rfd;
//                        // 从通道读取
//                        $line = @socket_read($rfd, 2048, PHP_NORMAL_READ);
//                        if ($line === false) {
//                            // 读取不到内容，结束连接
//                            echo "Connection closed on socket $i./n";
//                            close($i, $connections);
//                            continue;
//                        }
//                        $tmp = substr($line, -1);
//                        if ($tmp != "/r" && $tmp != "/n") {
//                            // 等待更多数据
//                            continue;
//                        }
//                        // 处理逻辑
//                        $line = trim($line);
//                        if ($line == "quit") {
//                            echo "Client $i quit./n";
//                            close($i, $connections);
//                            break;
//                        }
//                        if ($line) {
//                            echo "Client $i >>" . $line . "/n";
//                        }
//                    }
//
//                    // 轮循写通道
//                    foreach ($writefds as $wfd) {
//                        $i = (int) $wfd;
//                        $w = socket_write($wfd, "Welcome Client $i!/n");
//                    }
//                }
//            }
//        }
    }
}