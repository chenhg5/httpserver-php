<?php
/**
 * Created by PhpStorm.
 * User: chenhg5
 * Date: 2018/4/21
 * Time: 上午11:37
 */

namespace HttpServer\Module\Server;


use function var_dump;

class EpollModel extends BaseModel
{
    public function run()
    {
        parent::run(); // TODO: Change the autogenerated stub

        // epoll/kqueue 模型 libevent 扩展 libev 事件库
        // php7 扩展地址：https://github.com/expressif/pecl-event-libevent

        // 创建和初始化新的事件库
        $base = event_base_new();
        // 创建并返回一个新的事件资源
        $event = event_new();
        // 准备一个事件
        event_set($event, $this->serv, EV_PERSIST | EV_READ, ['\HttpServer\Module\Server\EpollModel', 'accept'], $base);
        // 关联事件到事件库
        event_base_set($event, $base);
        // 添加事件
        event_add($event);
        // 根据指定的事件库来处理事件循环
        event_base_loop($base);
    }

    static function accept($socket, $events, $base)
    {
        // 获取客户端连接后的socket
        $client = stream_socket_accept($socket);
        // 设置该socket为非阻塞模式
        stream_set_blocking($client, 0);

        $response = <<<RES
HTTP/1.1 200 OK
Server: Microsoft-IIS/4.0.1
Date: Mon, 5 Jan 1993 13:13:33 GMT
Content-Type: text/html
Last-Modified: Mon, 5 Jan 2004 13:13:12 GMT
Content-Length: 105

<html><head><title>PHP HTTP SERVER RESPONSE</title></head><body>  Welcome to Php Http Server  </body></html>
RES;

        fwrite($client, $response);


        // 创建一个新的缓存事件
        // TODO: segmentation fault
//        $buffer = event_buffer_new($client, ['\HttpServer\Module\Server\EpollModel', 'read'], null, ['\HttpServer\Module\Server\EpollModel', 'error'], $client);
//        var_dump($buffer);
//
//        // 关联缓存事件到事件库
//        event_buffer_base_set($buffer, $base);
//        // 缓存事件超时时间
//        event_buffer_timeout_set($buffer, 5, 5);
//        // 设置缓存事件读写的水印标记
//        event_buffer_watermark_set($buffer, EV_READ, 0, 0xffffff);
//        // 设置缓存事件的优先级
//        event_buffer_priority_set($buffer, 10);
//        // 启用缓存事件
//        event_buffer_enable($buffer, EV_READ | EV_PERSIST);
//        // 这里好像必需把$buffer赋给一个全局的变量
//        $GLOBALS['_'] = $buffer;
    }

    static function read($buffer, $client)
    {
        echo 'here read' . "\n";

        // 从缓存事件中读取数据
        while ($read = event_buffer_read($buffer, 4000)) {
        }
        // 给连接的socket客户端写入数据

        $response = <<<RES
HTTP/1.1 200 OK
Server: Microsoft-IIS/4.0.1
Date: Mon, 5 Jan 1993 13:13:33 GMT
Content-Type: text/html
Last-Modified: Mon, 5 Jan 2004 13:13:12 GMT
Content-Length: 105

<html><head><title>PHP HTTP SERVER RESPONSE</title></head><body>  Welcome to Php Http Server  </body></html>
RES;

        fwrite($client, $response);
        self::error($buffer, '', $client);
    }

    static function write($buffer, $client)
    {
        //从缓存事件中读取数据
//        while ($read = event_buffer_read($buffer, 4000)) {
//        }
        //给连接的socket客户端写入数据

        echo 'here write' . "\n";

    }

    static function error($buffer, $error, $client)
    {
        //禁用一个缓存事件
        event_buffer_disable($buffer, EV_READ | EV_WRITE);
        //释放缓存事件
        event_buffer_free($buffer);
        //关闭客户端socket
        fclose($client);
    }
}